import org.gradle.plugins.ide.eclipse.model.AccessRule

import java.text.DateFormat
import java.time.ZoneId
import java.time.ZoneOffset

plugins {
	id "edu.sc.seis.macAppBundle" version "2.1.6"
	id "org.sonarqube" version "2.5"
}

apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'groovy'
apply plugin: 'antlr'

sourceCompatibility="1.8"
targetCompatibility="1.8"

repositories {
	mavenLocal()
	jcenter()
	maven {
		name "sonatype snapshots"
		url "https://oss.sonatype.org/content/repositories/snapshots"
	}
	maven {
		name "sonatype release"
		url "https://oss.sonatype.org/content/repositories/releases"
	}
}

mainClassName = "de.prob2.ui.ProB2"
final preloaderClassName = "de.prob2.ui.ProB2Preloader"
applicationDefaultJvmArgs += ["-Djavafx.preloader=${preloaderClassName}"]

macAppBundle {
	dmgName = "ProB-2.0-for-MacOS"
	icon = "prob2.icns"
	bundleJRE = true
}

macAppBundle.mainClassName = mainClassName

if (hasProperty("macAppJRE")) {
	// Used to set a custom JRE to bundle at the command line: -PmacAppJRE=/path/to/the/jre
	macAppBundle.jreHome = macAppJRE
}

sourceSets.main.java.srcDirs = []
sourceSets.main.groovy.srcDirs += ["src/main/java"]

sourceSets.test.java.srcDirs = []
sourceSets.test.groovy.srcDirs = []

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

tasks.withType(GroovyCompile) {
	options.encoding = "UTF-8"
}

dependencies {
	antlr 'org.antlr:antlr4:4.5'

	compile 'com.google.code.gson:gson:2.7'
	compile 'com.googlecode.java-diff-utils:diffutils:1.3.0'
	compile 'de.codecentric.centerdevice:centerdevice-nsmenufx:2.1.4'
	compile 'de.hhu.stups:de.prob2.kernel:3.2.2-SNAPSHOT'
	compile 'de.hhu.stups:ltl-dsl:0.1.0'
	compile 'de.jensd:fontawesomefx-commons:8.15'
	compile 'de.jensd:fontawesomefx-fontawesome:4.7.0-5'
	compile 'org.codehaus.groovy:groovy-all:2.4.7'
	compile 'org.fxmisc.richtext:richtextfx:1.0.0-SNAPSHOT'
	compile 'org.fxmisc.wellbehaved:wellbehavedfx:0.3'
	compile 'org.hildan.fxgson:fx-gson:3.1.0'
	compile 'se.sawano.java:alphanumeric-comparator:1.4.1'

	testCompile 'org.loadui:testFx:3.1.2'
	testCompile 'org.testfx:testfx-core:4.0.+'
	testCompile 'org.testfx:testfx-junit:4.0.+'
	testRuntime 'org.testfx:openjfx-monocle:1.8.0_20'
}

eclipse.classpath.file.whenMerged {
	classpath ->
		classpath.entries.findResult { entry ->
			if (entry.kind == 'con' && entry.path.contains('org.eclipse.jdt.launching.JRE_CONTAINER')) {
					entry.accessRules.add(new AccessRule('accessible', 'javafx/**'))
					entry.accessRules.add(new AccessRule('accessible', 'netscape/**'))
			}
		}
}

processResources {
	doFirst {
		def f = file("src/main/resources/de/prob2/ui/build.properties")
		f.delete()
		def dateFormat = DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL, Locale.ROOT)
		dateFormat.timeZone = TimeZone.getTimeZone(ZoneId.from(ZoneOffset.UTC))
		f.append("buildTime=${dateFormat.format(new Date())}\n")
		def proc = new ProcessBuilder("git", "rev-parse", "HEAD").directory(buildDir).start()
		def exitCode = proc.waitFor()
		if (exitCode != 0) {
			throw new IllegalStateException("Command exited with status code ${exitCode}:\n" + proc.err.readLines().join("\n"))
		}
		def hash = proc.in.readLines()[0]
		f.append("commit=${hash}\n")
	}
}

sonarqube {
	properties {
		property("sonar.java.binaries", sourceSets.main.groovy.outputDir.path)
		
		property("sonar.organization", "prob2")
		property("sonar.projectKey", "prob2-ui")
		property("sonar.projectName", "prob2-ui")
		
		property("sonar.exclusions", "gradle/wrapper/*,build/**,scrapbook/*,src/main/resources/codemirror/clike.js,src/main/resources/codemirror/closebrackets.js,src/main/resources/codemirror/codemirror.css,src/main/resources/codemirror/codemirror.js,src/main/resources/codemirror/jquery.js,src/main/resources/codemirror/matchbrackets.js")
		
		property("sonar.login", System.getenv("SONAR_TOKEN"))
	}
}

task fatJar(type: Jar) {
	manifest {
		attributes(
			'Main-Class': mainClassName,
			'JavaFX-Application-Class': mainClassName,
			'JavaFX-Preloader-Class': preloaderClassName,
		)
	}
	baseName = project.name + '-all'
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar
}
