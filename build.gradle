import org.gradle.plugins.ide.eclipse.model.AccessRule 

buildscript {
	repositories {
		mavenLocal()
		jcenter()
	}
	
	dependencies {
		classpath group: "de.dynamicfiles.projects.gradle.plugins", name: "javafx-gradle-plugin", version: "8.8.2"
	}
}

plugins {
	// The OpenJFX plugin does not work before Java 11, so we apply it conditionally in an if block further below.
	id "org.openjfx.javafxplugin" version "0.0.6" apply false
	id "org.sonarqube" version "2.7"
}

apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'idea'

project.group = "de.hhu.stups"
project.version = "1.0.0-SNAPSHOT"

sourceCompatibility="1.8"
targetCompatibility="1.8"

repositories {
	mavenLocal()
	jcenter()
	maven {
		name "sonatype snapshots"
		url "https://oss.sonatype.org/content/repositories/snapshots"
	}
	maven {
		name "sonatype release"
		url "https://oss.sonatype.org/content/repositories/releases"
	}
	maven {
		// For the FontAwesomeFX fork that is compatible with Java 8 and 9:
		// https://github.com/xzel23/fontawesomefx
		name "dua3 Bintray"
		url "https://dl.bintray.com/dua3/public"
	}
}

mainClassName = "de.prob2.ui.ProB2"
final preloaderClassName = "de.prob2.ui.ProB2Preloader"
applicationDefaultJvmArgs += [
	"-Djavafx.preloader=${preloaderClassName}".toString(),
]

if (JavaVersion.current().java9Compatible) {
	applicationDefaultJvmArgs += [
		// Required by centerdevice-nsmenufx (as of version 2.1.6; see https://github.com/codecentric/NSMenuFX/issues/29)
		"--add-exports=javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED",
		"--add-exports=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED",
		"--add-opens=javafx.graphics/com.sun.glass.ui.mac=ALL-UNNAMED",
		"--add-exports=javafx.graphics/com.sun.javafx.menu=ALL-UNNAMED",
		"--add-exports=javafx.graphics/com.sun.javafx.tk=ALL-UNNAMED",
		"--add-opens=javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED",
		
		// Required by richtextfx (as of version 0.9.x; planned to be fixed in 0.10, see https://github.com/FXMisc/RichTextFX/issues/776)
		"--add-exports=javafx.graphics/com.sun.javafx.geom=ALL-UNNAMED",
		"--add-exports=javafx.graphics/com.sun.javafx.scene.text=ALL-UNNAMED",
		"--add-opens=javafx.graphics/com.sun.javafx.text=ALL-UNNAMED",
		"--add-opens=javafx.graphics/javafx.scene.text=ALL-UNNAMED",
	]
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

configurations.all {
	resolutionStrategy.cacheChangingModulesFor(0, 'seconds')
}

dependencies {
	compile group: "com.google.code.gson", name: "gson", version: "2.8.2"
	compile group: "com.googlecode.java-diff-utils", name: "diffutils", version: "1.3.0"
	compile group: "de.codecentric.centerdevice", name: "centerdevice-nsmenufx", version: "2.1.6"
	compile group: "de.hhu.stups", name: "de.prob2.kernel", version: "3.2.12-SNAPSHOT", changing: true
	compile group: "de.jensd", name: "fontawesomefx-commons", version: "9.1.2-jpms"
	// Cannot update to the next higher version (4.7.0-9), because its class files are compiled for Java 9.
	compile group: "de.jensd", name: "fontawesomefx-fontawesome", version: "4.7.0-5"
	compile group: "org.fxmisc.richtext", name: "richtextfx", version: "0.9.0"
	compile group: "org.fxmisc.wellbehaved", name: "wellbehavedfx", version: "0.3.3"
	compile group: "org.hildan.fxgson", name: "fx-gson", version: "3.1.0"
	compile group: "org.pf4j", name: "pf4j", version: "2.2.0"
	compile group: "se.sawano.java", name: "alphanumeric-comparator", version: "1.4.1"
}

if (JavaVersion.current().java11Compatible) {
	apply plugin: "org.openjfx.javafxplugin"
	javafx {
		modules = [
			"javafx.base",
			"javafx.controls",
			"javafx.fxml",
			"javafx.graphics",
			"javafx.swing",
			"javafx.web",
		]
	}
}

eclipse.classpath.file.whenMerged {
	classpath ->
		classpath.entries.findResult { entry ->
			if (entry.kind == 'con' && entry.path.contains('org.eclipse.jdt.launching.JRE_CONTAINER')) {
					entry.accessRules.add(new AccessRule('accessible', 'javafx/**'))
					entry.accessRules.add(new AccessRule('accessible', 'netscape/**'))
			}
		}
}

def readCurrentGitCommit() {
	def proc = ["git", "rev-parse", "HEAD"].execute(null, project.projectDir)
	def exitCode = proc.waitFor()
	if (exitCode != 0) {
		throw new IllegalStateException("git rev-parse command exited with status code ${exitCode}:\n" + proc.err.readLines().join("\n"))
	}
	return proc.in.readLines()[0]
}

processResources {
	doFirst {
		def f = file("src/main/resources/de/prob2/ui/build.properties")
		f.delete()
		f.append("version=${project.version}\n")
		f.append("commit=${readCurrentGitCommit()}\n")
	}
}

if (JavaVersion.current() <= JavaVersion.VERSION_1_9) {
	apply plugin: 'javafx-gradle-plugin'
	jfx {
		mainClass = project.mainClassName
		jfxMainAppJarName = project.name + "-jfx.jar"
		preLoader = preloaderClassName
		identifier = project.group + "." + project.name
		vendor = project.group
		nativeReleaseVersion = project.version
		appName = project.name
		skipNativeVersionNumberSanitizing = true
		skipMainClassScanning = true
	}
}

sonarqube {
	properties {
		property("sonar.java.binaries", sourceSets.main.java.outputDir.path)
		
		property("sonar.projectKey", "prob2-ui")
		property("sonar.projectName", "prob2-ui")
		
		property("sonar.exclusions", "gradle/wrapper/*,build/**,scrapbook/*,src/main/resources/codemirror/clike.js,src/main/resources/codemirror/closebrackets.js,src/main/resources/codemirror/codemirror.css,src/main/resources/codemirror/codemirror.js,src/main/resources/codemirror/jquery.js,src/main/resources/codemirror/matchbrackets.js")
		
		property("sonar.login", System.getenv("SONAR_TOKEN"))
	}
}

if( rootProject == project) {
	wrapper {
		gradleVersion = "5.0"
		distributionType = Wrapper.DistributionType.ALL
	}
}


task createHelp(type: Exec) {
	inputs.dir("src/main/resources/help")
	outputs.dir("src/main/resources/help")
	commandLine './help.sh'
}
processResources.dependsOn(createHelp)

tasks.withType(JavaCompile) {
	options.compilerArgs += ["-proc:none"]
}

if (project.hasProperty("probHome")) {
	allprojects {
		tasks.withType(JavaForkOptions) {
			systemProperties["prob.home"] = project.probHome
		}
	}
}
